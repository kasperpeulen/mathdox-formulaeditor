This file contains some thoughts written down while programming on this editor.
It might be useful when writing something about the creation of the editor or
when understanding something about the design decisions.

context dependant presentation:
  It is nice if symbols can be shown differently on the palette then they will
  be shown when inserted. This comes down to context dependant presentation.

  Implementation is as follows: the getPresentation now has a context object
  (which starts as {}) with cascading properties.

  Idea: override like with $extend; TODO: add extend like library function.

  Example uses: inPalette and inMatrix are set inside an editor palette and
  inside a matrix. This makes it possible in the getPresentation for an
  insertion block to return a smaller BlockSymbol.

keywords vs application of keywords; infix vs prefix application:
  A keyword is a symbol reference that can be presented with a series of
  symbols. An example of a such a keyword is nums1.pi. An example of a keyword
  that can be used in an application is transc1.sin. An example of an infix
  operator that can be presented by one or more symbols is relation1.eq.

  From a palette, one wants to be able to insert symbols usually only used for
  an application, by only inserting the symbol itself, without arguments. This
  is especially useful for infix symbols: 'a' -> 'a+'. It might also be useful
  for symbols like transc1.sin. 
  
  These symbols do not always necessarily have the standard meaning by
  themselves, but do have a presentation and can be parsed later as part of a
  larger formula. 

  If these symbols are described in OpenMath by their OMS symbol reference
  (like they are currenly in the palette description), this means they should
  be parsed in the OpenMath parser and shown as a symbol, although it is not
  necessary that they can later be parsed again from the presentation without
  arguments.

  Furthermore it might be useful to think about whether all prefix symbols have
  a meaning with and without arguments; do we want to be able to parse
  "nums1.pi(x)", "1+transc1.sin" or "+(a,b)"? The answer is probably no in all
  these cases. 
  
  To semantically describe that "+(a,b)" should not be possible, it might be
  desirable to add a possibility to a semantic keyword that it is infix (or a
  constant that does not support arguments, like nums1.e, nums1.pi, or
  nums1.i).
