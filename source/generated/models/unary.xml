<model:model xmlns:model="local:model">
$identify("org/mathdox/formulaeditor/modules/<model:cd/>/<model:name/>.js");

$require("org/mathdox/formulaeditor/semantics/MultaryOperation.js");
$require("org/mathdox/formulaeditor/presentation/Superscript.js");
$require("org/mathdox/formulaeditor/parsing/openmath/OpenMathParser.js");
$require("org/mathdox/formulaeditor/parsing/expression/ExpressionParser.js");

$main(function(){

  var mathmlSymbol= [ "", "", ""];
  
  if ("<model:symbol_mathml_pre/>" != "") {
    mathmlSymbol[0] = "&lt;mo&gt;<model:symbol_mathml_pre/>&lt;/mo&gt;";
  }
  if ("<model:symbol_mathml_post/>" != "") {
    mathmlSymbol[2] = "&lt;mo&gt;<model:symbol_mathml_post/>&lt;/mo&gt;";
  }

  /**
   * Defines a semantic tree node that represents a unary minus.
   */
  org.mathdox.formulaeditor.semantics.<model:cd capitalize='true'/><model:name capitalize='true'/> =
    $extend(org.mathdox.formulaeditor.semantics.MultaryOperation, {
      

      symbol : {

        onscreen : ["<model:symbol_screen_pre/>","","<model:symbol_screen_post/>"],
        openmath : "&lt;OMS cd='<model:cd/>' name='<model:name/>'/&gt;",
        mathml   : mathmlSymbol

      },

      precedence : <model:precedence/>

    });

  /**
   * Extend the OpenMathParser object with parsing code for arith1.unary_minus.
   */
  org.mathdox.formulaeditor.parsing.openmath.OpenMathParser =
    $extend(org.mathdox.formulaeditor.parsing.openmath.OpenMathParser, {

      /**
      * Returns a unary minus object based on the OpenMath node.
      */
      handle<model:cd capitalize='true'/><model:name capitalize='true'/> : function(node) {

        var operand = this.handle(node.getChildNodes().item(1));
        return new org.mathdox.formulaeditor.semantics.<model:cd capitalize='true'/><model:name capitalize='true'/>(operand);

      }

    });

  /**
   * Extend the ExpressionParser object with parsing code for unary minus.
   */
  with( org.mathdox.formulaeditor.semantics          ) {
  with( org.mathdox.formulaeditor.parsing.expression ) {
  var parserGenerator = new org.mathdox.parsing.ParserGenerator();
  with( parserGenerator ) {

  var rulesEnter = new Array();
  var positionEnter = 0;
  if ("<model:symbol_enter_pre/>" != "") {
    rulesEnter.push(literal("<model:symbol_enter_pre/>"));
    positionEnter++;
  }
  rulesEnter.push(rule("expression<model:precedence2/>"));
  if ("<model:symbol_enter_post/>" != "") {
    rulesEnter.push(literal("<model:symbol_enter_post/>"));
  }

  if (( "<model:symbol_enter_pre/>"  == "<model:symbol_screen_pre/>"  ) &amp;&amp;
      ( "<model:symbol_enter_post/>" == "<model:symbol_screen_post/>" )) {
    // only one expression, same on screen
    org.mathdox.formulaeditor.parsing.expression.ExpressionParser =
      $extend(org.mathdox.formulaeditor.parsing.expression.ExpressionParser, {

        // expression<model:precedence/> = <model:cd/><model:name/> | super.expression<model:precedence/>
        expression<model:precedence/> : function() {
          var parent = arguments.callee.parent;
          alternation(
            rule("<model:cd/><model:name/>"),
            parent.expression<model:precedence/>
          ).apply(this, arguments);
        },

        // <model:cd/><model:name/> = "<model:symbol_enter_pre/>" expression<model:precedence2/> "<model:symbol_enter_post/>"
        <model:cd/><model:name/> :
          transform(
            concatenation.apply(parserGenerator, rulesEnter),
            function(result) {
              return new <model:cd capitalize='true'/><model:name capitalize='true'/>(result[positionEnter]);
            }
          )

    });
  } else { // allow alternative as displayed on the screen
    var rulesScreen = new Array();
    var positionScreen = 0;
    if ("<model:symbol_screen_pre/>" != "") {
      rulesScreen.push(literal("<model:symbol_screen_pre/>"));
      positionScreen++;
    }
    rulesScreen.push(rule("expression<model:precedence2/>"));
    if ("<model:symbol_screen_post/>" != "") {
      rulesScreen.push(literal("<model:symbol_screen_post/>"));
    }
  
    org.mathdox.formulaeditor.parsing.expression.ExpressionParser =
      $extend(org.mathdox.formulaeditor.parsing.expression.ExpressionParser, {

        // expression<model:precedence/> = <model:cd/><model:name/> | super.expression<model:precedence/>
        expression<model:precedence/> : function() {
          var parent = arguments.callee.parent;
          alternation(
            rule("<model:cd/><model:name/>"),
            rule("<model:cd/><model:name/>alt"),
            parent.expression<model:precedence/>
          ).apply(this, arguments);
        },

        // <model:cd/><model:name/> = "<model:symbol_enter_pre/>" expression<model:precedence2/> "<model:symbol_enter_post/>"
        <model:cd/><model:name/> :
          transform(
            concatenation.apply(parserGenerator, rulesEnter),
            function(result) {
              return new <model:cd capitalize='true'/><model:name capitalize='true'/>(result[positionEnter]);
            }
          ),

        // <model:cd/><model:name/>alt = "<model:symbol_screen_pre/>" expression<model:precedence2/> "<model:symbol_screen_post/>"
        <model:cd/><model:name/>alt :
          transform(
            concatenation.apply(parserGenerator, rulesScreen),
            function(result) {
              return new <model:cd capitalize='true'/><model:name capitalize='true'/>(result[positionScreen]);
            }
          )
     });
   }
  }}}

});
</model:model>
